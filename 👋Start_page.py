from datetime import datetime

import pandas as pd
import requests
import streamlit as st
from sklearn.linear_model import LinearRegression
from streamlit.runtime.uploaded_file_manager import UploadedFile
import plotly.graph_objects as go

st.set_page_config(
    page_title="Start page",
    page_icon="üëã",
)

city_to_country = {
    "New York": "US",
    "London": "GB",
    "Paris": "FR",
    "Tokyo": "JP",
    "Moscow": "RU",
    "Sydney": "AU",
    "Berlin": "DE",
    "Beijing": "CN",
    "Rio de Janeiro": "BR",
    "Dubai": "AE",
    "Los Angeles": "US",
    "Singapore": "SG",
    "Mumbai": "IN",
    "Cairo": "EG",
    "Mexico City": "MX"
}

month_to_season = {12: "winter", 1: "winter", 2: "winter",
                   3: "spring", 4: "spring", 5: "spring",
                   6: "summer", 7: "summer", 8: "summer",
                   9: "autumn", 10: "autumn", 11: "autumn"}

@st.cache_data
def load_data(file: UploadedFile) -> pd.DataFrame:
    return pd.read_csv(file)


@st.cache_data
def get_current_temp(city, token):
    country = city_to_country[city]
    response = requests.get(
        f"https://api.openweathermap.org/data/2.5/weather?q={city},{country}&appid={token}&units=metric")
    if response.status_code != 200:
        st.error(response.json())
        return None
    return response.json()['main']['temp']


@st.cache_data
def check_api_token(token):
    if get_current_temp("London", token) is None:
        return False
    st.success("API –∫–ª—é—á –≤–∞–ª–∏–¥–Ω—ã–π!")
    st.snow()
    return True


@st.cache_data
def get_temp_data(city, data):
    city_data = data[data['city'] == city]
    season_profile = city_data.groupby('season')['temperature'].agg(['mean', 'std'])
    city_data['mean_temp'] = city_data['season'].map(season_profile['mean'])
    city_data['std_temp'] = city_data['season'].map(season_profile['std'])
    anomalies = city_data[
        abs(city_data['temperature'] - city_data['mean_temp']) > 2 * city_data['std_temp']
        ]
    min_temp = city_data['temperature'].min()
    max_temp = city_data['temperature'].max()
    avg_temp = city_data['temperature'].mean()

    trend = calculate_trend(city_data)

    fig = go.Figure()

    fig.add_trace(go.Scatter(
        x=city_data['timestamp'],
        y=city_data['temperature'],
        mode='markers',
        name=f"{city} –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
        marker=dict(size=8, color='blue', opacity=0.7)
    ))

    fig.add_trace(go.Scatter(
        x=city_data['timestamp'],
        y=trend,
        mode='lines',
        name=f"{city} –õ–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞",
        line=dict(color='red', width=2)
    ))

    fig.add_trace(go.Scatter(
        x=anomalies['timestamp'],
        y=anomalies['temperature'],
        mode='markers',
        name="–ê–Ω–æ–º–∞–ª–∏–∏",
        marker=dict(size=10, color='orange', symbol='x', opacity=1)
    ))

    fig.update_layout(
        title=f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ç—Ä–µ–Ω–¥ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city} (–ª–µ–≥–µ–Ω–¥–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞)",
        xaxis_title="–î–∞—Ç–∞",
        yaxis_title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C",
        legend=dict(orientation="h", x=0.5, xanchor="center", y=1.1, yanchor="top"),
        template="plotly_white"
    )

    return season_profile, anomalies, min_temp, max_temp, avg_temp, fig


@st.cache_data
def calculate_trend(df):
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df['days_since_start'] = (df['timestamp'] - df['timestamp'].min()).dt.days

    X = df[['days_since_start']]
    y = df['temperature']

    lin_reg = LinearRegression()
    lin_reg.fit(X, y)

    return lin_reg.predict(X)


st.markdown(
    """
### –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–≥–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ 
    """
)

token = st.text_input("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á OpenWeatherMap", "")
if token:
    is_correct = check_api_token(token)

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ", type=["csv"])

if uploaded_file:
    df = load_data(uploaded_file)
    st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

    cities = df['city'].unique()
    selected_city = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", cities)

    st.write(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {selected_city}:")
    profile, anomalies, min_temp, max_temp, avg_temp, fig = get_temp_data(selected_city, df)

    st.write(f"–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {avg_temp:.2f} ¬∞C")
    st.write(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {min_temp:.2f} ¬∞C")
    st.write(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {max_temp:.2f} ¬∞C")

    st.write("–°–µ–∑–æ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:")
    st.dataframe(profile,
                 column_config={'mean': 'mean, ¬∞C', 'std': 'std, ¬∞C'}
                 )

    print(type(anomalies))
    st.plotly_chart(fig)


    temp_button = st.button("–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É")
    if temp_button:
        temp = get_current_temp(selected_city, token)
        st.snow()

        st.write(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {selected_city}: {temp} ¬∞C")
        season = month_to_season[datetime.now().month]
        if abs(temp - profile.loc[season, 'mean']) > 2 * profile.loc[season, 'std']:
            st.error("–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∞–Ω–æ–º–∞–ª—å–Ω–∞ –¥–ª—è —Å–µ–∑–æ–Ω–∞!")
        else:
            st.success("–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–µ –∞–Ω–æ–º–∞–ª—å–Ω–∞ –¥–ª—è —Å–µ–∑–æ–Ω–∞")

